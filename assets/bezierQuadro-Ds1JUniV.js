import{bL as t,N as e,bD as a,aZ as n,bH as s,y as i,z as r,c7 as o,bK as d}from"./index-5gyre0hA.js";import{d as l}from"./line-BKuOqRrm.js";function c(e,a,n,s,i){const r=n.subtract(e).length()+n.subtract(a).length(),o=Math.max(3/r,.02);let d;for(let l=0;;l+=o){l>1&&(l=1);const r=e.scaled((1-l)*(1-l)),o=n.scaled(2*l*(1-l)),c=a.scaled(l*l),h=r.add(o).add(c);if(void 0!==d){const{distance:e}=t(h,d,s);if(e<i)return!0}else if(h.subtract(s).length()<i)return!0;if(d=h,1===l)break}return!1}function h(e,a,n,s,i,r){const o=a.subtract(e).length()+n.subtract(a).length()+s.subtract(n).length(),d=Math.max(3/o,.02);let l;for(let c=0;;c+=d){c>1&&(c=1);const o=u(e,a,n,s,c);if(void 0!==l){const{distance:e}=t(o,l,i);if(e<r)return!0}else if(o.subtract(i).length()<r)return!0;if(l=o,c>=1)break}return!1}function u(t,a,n,s,i){const r=1-(i=e(i,0,1)),o=t.scaled(r*r*r),d=a.scaled(3*r*r*i),l=n.scaled(3*r*i*i),c=s.scaled(i*i*i);return o.add(d).add(l).add(c)}function f(t,e){for(let a=0;a<e.length;a++){const n=e[a],s=n[0];t.moveTo(s.x,s.y);for(let e=1;e<n.length;e++){const a=n[e];t.lineTo(a.x,a.y)}}}function x(e,a,n){for(const s of n)for(let n=1;n<s.length;n++){const o=s[n-1],d=s[n],{distance:l}=t(o,d,e);if(l<a)return new i(r.MovePoint)}return null}class g extends a{drawImpl(t){if(!this._data)return;const[e,a,i]=this._data.points,r=t.context;if(r.lineCap="round",r.strokeStyle=this._data.lineColor,r.lineWidth=this._data.lineWidth,n(r,this._data.lineStyle),2===this._data.points.length)return r.beginPath(),r.moveTo(e.x,e.y),r.lineTo(a.x,a.y),void r.stroke();const d=a.subtract(e),c=i.subtract(d.scaled(.25)),h=i.add(d.scaled(.25));this._data.fillBack&&this._data.points.length>2&&(r.fillStyle=this._data.backColor,r.beginPath(),r.moveTo(e.x,e.y),r.quadraticCurveTo(c.x,c.y,i.x,i.y),r.quadraticCurveTo(h.x,h.y,a.x,a.y),r.fill()),r.beginPath(),f(r,this._data.extendLeftSegments),r.moveTo(e.x,e.y),r.quadraticCurveTo(c.x,c.y,i.x,i.y),r.quadraticCurveTo(h.x,h.y,a.x,a.y),f(r,this._data.extendRightSegments),this._data.leftEnd===s.Arrow&&l(c,e,r,r.lineWidth,o),this._data.rightEnd===s.Arrow&&l(h,a,r,r.lineWidth,o),r.stroke()}hitTest(t){if(this._data&&3===this._data.points.length){const e=d().curve,[a,n,s]=this._data.points,o=n.subtract(a),l=s.subtract(o.scaled(.25)),h=s.add(o.scaled(.25));if(c(s,a,l,t,e))return new i(r.MovePoint);if(c(s,n,h,t,e))return new i(r.MovePoint);let u=x(t,e,this._data.extendLeftSegments);return null===u&&(u=x(t,e,this._data.extendRightSegments)),u}return null}}export{g as B,f as b,h as c,x as h,c as q};
