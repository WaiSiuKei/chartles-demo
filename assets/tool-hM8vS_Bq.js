var t=Object.defineProperty,e=(e,i,n)=>((e,i,n)=>i in e?t(e,i,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[i]=n)(e,"symbol"!=typeof i?i+"":i,n);import{T as i,a as n,A as s,D as o}from"./toolPaneView-BkZhzbTB.js";import{an as r}from"./index-iNH1zFVl.js";import{L as l,e as a,bS as h,bK as c,A as p}from"./index-5gyre0hA.js";import{P as d,T as u}from"./axisPaneView-B6qY_qE1.js";import{C as P}from"./composite-CCMtJLBO.js";import{P as m}from"./polygon-D49cV0Ps.js";import"./baseTool-BM5mqL4_.js";import"./line-BKuOqRrm.js";class _ extends i{constructor(){super(...arguments),e(this,"_renderer",new P(this._hitTestCollector)),e(this,"_polygonRenderer",new m)}renderer(){return this._renderer}_updateImpl(){this._renderer.clear();const t=this._source.properties();this._polygonRenderer.setData({points:this.points(),lineColor:t.lineColor,lineWidth:t.lineWidth,lineStyle:l.solid,filled:this._data.filled,background:t.backgroundColor,transparency:t.transparency}),this._renderer.append(this._polygonRenderer),this.addAnchors(this._renderer)}}class f extends n{constructor(){super(...arguments),e(this,"_lines",new _(this,this.model)),e(this,"_paneView",[this._lines]),e(this,"_priceAxisPaneViews",[new d(Object.create(null))]),e(this,"_timeAxisPaneViews",[new u(Object.create(null))]),e(this,"_filled",!1)}pointsCount(){return 1/0}addPoint(t,e){if(this.controlPoints.length>1){const i=a(this.pointToScreenPoint(t)),n=this.controlPoints[this.controlPoints.length-2],o=a(this.pointToScreenPoint(n)),r=h(i,o),l=c().minDistanceBetweenPoints;if(r<l)return s.Reject;const p=a(this.pointToScreenPoint(this.controlPoints[0]));if(h(i,p)<l)return this._filled=!0,this.controlPoints.splice(e,1),s.AcceptAndFinish}return super.addPoint(t,e)}setPoint(t,e,i){if(!(0===t||t===this.controlPoints.length-1))return;const n=t===this.controlPoints.length-1?this.controlPoints[0]:this.controlPoints[this.controlPoints.length-1],s=a(this.pointToScreenPoint(n));h(i.screenPoint,s)<c().minDistanceBetweenPoints&&(this._filled=!0)}updateAllViews(){if(!this.controlPoints.length)return;const t=[],e=[],i=[];for(let n=0;n<this.controlPoints.length;n++){const t=this.controlPoints[n],e=this.pointToScreenPoint(t);if(!e)return;i.push(new p(e,{pointIndex:n}))}t.length&&this._timeAxisPaneViews[0].update(this._calculateTimeAxisPaneViewsData(Math.min.apply(null,t),Math.max.apply(null,t))),e.length&&this._priceAxisPaneViews[0].update(this._calculatePriceAxisPaneViewData(Math.min.apply(null,e),Math.max.apply(null,e))),this._lines.update({points:i,filled:this._filled})}}class w extends o{constructor(){super(...arguments),e(this,"type",r)}createPrimitive(){return new f({id:this.id,points:[],lineColor:"#00BCD4",lineWidth:2,backgroundColor:"#00BCD4",transparency:80},...this.resetArgs)}}export{w as PolylineTool};
