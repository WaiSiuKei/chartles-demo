var e=Object.defineProperty,t=(t,i,s)=>((t,i,s)=>i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[i]=s)(t,"symbol"!=typeof i?i+"":i,s);import{b0 as i,L as s,e as n,A as r,z as o,bH as a}from"./index-5gyre0hA.js";import{T as l,a as c,i as h,D as d}from"./toolPaneView-BkZhzbTB.js";import{aj as p}from"./index-iNH1zFVl.js";import{P as u}from"./priceLabelPriceAxisView-CKrbEFjY.js";import{T as m}from"./timeLabelTimeAxisView-DLVMuesT.js";import{P,T as _}from"./axisPaneView-B6qY_qE1.js";import{B as w}from"./bezierQuadro-Ds1JUniV.js";import{C as x}from"./composite-CCMtJLBO.js";import"./baseTool-BM5mqL4_.js";import"./line-BKuOqRrm.js";class b extends l{constructor(){super(...arguments),t(this,"_renderer",new x(this._hitTestCollector)),t(this,"_bezierQuadroRenderer",new w)}renderer(){return this._renderer}_updateImpl(){this._renderer.clear();const e=this._source.properties();3===this.points().length&&(e.extendLeft&&i(),e.extendRight&&i());const t={points:[...this.points()],lineColor:e.lineColor,lineWidth:e.lineWidth,lineStyle:s.solid,leftEnd:e.leftEnd,rightEnd:e.rightEnd,fillBack:e.fillBack,backColor:e.backColor,extendLeftSegments:[],extendRightSegments:[]};this._bezierQuadroRenderer.setData(t),this._renderer.append(this._bezierQuadroRenderer),this.addAnchors(this._renderer)}}class f extends c{constructor(){super(...arguments),t(this,"_lines",new b(this,this.model)),t(this,"_paneView",[this._lines]),t(this,"_priceAxisPaneViews",[new P(Object.create(null))]),t(this,"_timeAxisPaneViews",[new _(Object.create(null))]),t(this,"_timeAxisViews",[new m(Object.create(null)),new m(Object.create(null)),new m(Object.create(null))]),t(this,"_priceAxisViews",[new u(Object.create(null)),new u(Object.create(null)),new u(Object.create(null))])}pointsCount(){return 2}updateMove(e,t){super.updateMove(e,t),1===t&&this._updateControlPoint()}addPoint(e,t){const i=super.addPoint(e,t);return h(i)&&1===t&&this._updateControlPoint(),i}_updateControlPoint(){this.controlPoints[2]=this._calculateControlPoint()}_calculateControlPoint(){const e=n(this.pointToScreenPoint(this.controlPoints[0])),t=n(this.pointToScreenPoint(this.controlPoints[1])),i=t.subtract(e).scaled(.5).transposed().scaled(.3),s=e.add(t).scaled(.5).add(i);return this.screenPointToPoint(s)}updateAllViews(){if(!this.controlPoints.length)return;const e=[],t=[],i=[];for(let s=0;s<this.controlPoints.length;s++){const n=this.controlPoints[s],a=this.pointToScreenPoint(n);if(!a)return;e.push(a.x),t.push(a.y);const l=new r(a,{pointIndex:s,hitTarget:o.ChangePoint});i.push(l),s<=1&&(this._timeAxisViews[s].update(this._calculateTimeAxisViewData(n.time,a.x)),this._priceAxisViews[s].update(this._calculatePriceAxisViewData(n.price,a.y)))}e.length&&this._timeAxisPaneViews[0].update(this._calculateTimeAxisPaneViewsData(Math.min.apply(null,e),Math.max.apply(null,e))),t.length&&this._priceAxisPaneViews[0].update(this._calculatePriceAxisPaneViewData(Math.min.apply(null,t),Math.max.apply(null,t))),this._lines.update({points:i})}}class j extends d{constructor(){super(...arguments),t(this,"type",p)}createPrimitive(){return new f({id:this.id,points:[],lineColor:"#2962FFFF",lineWidth:2,leftEnd:a.Normal,rightEnd:a.Normal,extendLeft:!1,extendRight:!1,fillBack:!1,backColor:"#2962FF33"},...this.resetArgs)}}export{j as CurveTool};
